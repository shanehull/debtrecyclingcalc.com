package calc

import (
	"math"
	"testing"
)

func Test_CAGR(t *testing.T) {
	cagr := CAGR(100, 200, 10)
	if math.Abs(cagr-0.071773) > 0.000001 {
		t.Fatalf(
			"CAGR(%d, %d, %d) = %f, want %f",
			100, 200, 10, cagr, 0.071773,
		)
	}
}

func Test_DebtRecycling(t *testing.T) {
	type drTests struct {
		params   Parameters
		expected *Data
	}

	cases := []drTests{
		{
			params: Parameters{
				Salary:               150000,
				InitialInvestment:    100000,
				AnnualInvestment:     50000,
				MortgageSize:         600000,
				MortgageInterestRate: 0.05,
				DividendReturnRate:   0.02,
				CapitalGrowthRate:    0.08,
				NumYears:             10,
				Country:              "au",
				ReinvestDividends:    false,
				ReinvestTaxRefunds:   false,
			},
			expected: &Data{
				DebtRecycled: []float64{
					100000,
					150000,
					200000,
					250000,
					300000,
					350000,
					400000,
					450000,
					500000,
					550000,
				},
				DividendReturns: []float64{
					2000,
					3240,
					4579.200000000001,
					6025.536000000001,
					7587.578880000002,
					9274.585190400003,
					11096.552005632004,
					13064.276166082565,
					15189.41825936917,
					17484.571720118704,
				},
				CumulativeDividends: []float64{
					2000,
					5240,
					9819.2,
					15844.736,
					23432.31488,
					32706.900070400006,
					43803.45207603201,
					56867.72824211457,
					72057.14650148374,
					89541.71822160245,
				},
				NonDeductibleInterest: []float64{
					25000,
					22500,
					20000,
					17500,
					15000,
					12500,
					10000,
					7500,
					5000,
					2500,
				},
				TaxDeductibleInterest: []float64{
					5000,
					7500,
					10000,
					12500,
					15000,
					17500,
					20000,
					22500,
					25000,
					27500,
				},
				TaxRefunds: []float64{
					3150,
					7875,
					14175,
					22050,
					31500,
					42525,
					55125,
					69300,
					85050,
					102375,
				},
				CumulativeTaxRefunds: []float64{
					3150,
					7875,
					14175,
					22050,
					31500,
					42525,
					55125,
					69300,
					85050,
					102375,
				},
				PortfolioValue: []float64{
					100000,
					162000,
					228960.00000000003,
					301276.80000000005,
					379378.9440000001,
					463729.25952000014,
					554827.6002816001,
					653213.8083041282,
					759470.9129684585,
					874228.5860059352,
					998166.8728864101,
				},
				NetPosition: []float64{
					-500000,
					-438000,
					-371040,
					-298723.19999999995,
					-220621.05599999992,
					-136270.74047999986,
					-45172.39971839986,
					53213.80830412824,
					159470.9129684585,
					274228.5860059352,
				},
				TotalInvested: 600000,
				TotalValue:    1.1900835911080125e+06,
			},
		},
		{
			params: Parameters{
				Salary:               150000,
				InitialInvestment:    100000,
				AnnualInvestment:     50000,
				MortgageSize:         600000,
				MortgageInterestRate: 0.05,
				DividendReturnRate:   0.02,
				CapitalGrowthRate:    0.08,
				NumYears:             10,
				Country:              "au",
				ReinvestDividends:    true,
				ReinvestTaxRefunds:   false,
			},
			expected: &Data{
				PortfolioValue: []float64{
					100000,
					164160,
					234838.65600000002,
					312698.2634496001,
					398468.40701607947,
					492952.7971689132,
					597036.8013612748,
					711695.7403795804,
					838004.0276021458,
					977145.2368065239,
					1.1304231928660667e+06,
				},
				CumulativeDividends: []float64{
					2000,
					5283.200000000001,
					9979.973120000002,
					16233.938388992005,
					24203.306529313595,
					34062.36247269186,
					46003.09849991735,
					60237.01330750896,
					76997.09385955188,
					96539.99859568235,
				},
				DebtRecycled: []float64{
					102000,
					153283.2,
					204696.77312,
					256253.965268992,
					307969.3681403216,
					359859.05594337825,
					411940.7360272255,
					464233.9148075916,
					516760.0805520429,
					569542.9047361305,
				},
				CumulativeTaxRefunds: []float64{
					3150,
					7875,
					14175,
					22050,
					31500,
					42525,
					55125,
					69300,
					85050,
					102375,
				},
				NetPosition: []float64{
					-500000,
					-435840,
					-365161.344,
					-287301.7365503999,
					-201531.59298392053,
					-107047.20283108682,
					-2963.198638725211,
					111695.74037958041,
					238004.0276021458,
					377145.23680652387,
				},
				TotalInvested: 600000,
				TotalValue:    1.3293381914617491e+06,
			},
		},
		{
			params: Parameters{
				Salary:               150000,
				InitialInvestment:    100000,
				AnnualInvestment:     50000,
				MortgageSize:         600000,
				MortgageInterestRate: 0.05,
				DividendReturnRate:   0.02,
				CapitalGrowthRate:    0.08,
				NumYears:             10,
				Country:              "au",
				ReinvestDividends:    false,
				ReinvestTaxRefunds:   true,
			},
			expected: &Data{
				PortfolioValue: []float64{
					100000,
					165402,
					237737.16,
					317560.1328000001,
					405469.9434240001,
					502113.53889792017,
					608189.6220097538,
					724452.7917705342,
					851718.015112177,
					990865.4563211512,
					1.1428456928268434e+06,
				},
				DebtRecycled: []float64{
					103150,
					154725,
					206300,
					257875,
					309450,
					361025,
					412600,
					464175,
					515750,
					567325,
				},
				CumulativeDividends: []float64{
					2000,
					5308.04,
					10062.7832,
					16413.985856,
					24523.38472448,
					34565.65550243841,
					46729.44794263349,
					61218.50377804417,
					78252.86408028772,
					98070.17320671075,
				},
				CumulativeTaxRefunds: []float64{
					3150,
					7875,
					14175,
					22050,
					31500,
					42525,
					55125,
					69300,
					85050,
					102375,
				},
				NetPosition: []float64{
					-500000,
					-434598,
					-362262.83999999997,
					-282439.8671999999,
					-194530.0565759999,
					-97886.46110207983,
					8189.622009753832,
					124452.79177053424,
					251718.015112177,
					390865.4563211512,
				},
				TotalInvested: 600000,
				TotalValue:    1.343290866033554e+06,
			},
		},
		{
			params: Parameters{
				Salary:               150000,
				InitialInvestment:    100000,
				AnnualInvestment:     50000,
				MortgageSize:         600000,
				MortgageInterestRate: 0.05,
				DividendReturnRate:   0.02,
				CapitalGrowthRate:    0.08,
				NumYears:             10,
				Country:              "au",
				ReinvestDividends:    true,
				ReinvestTaxRefunds:   true,
			},
			expected: &Data{
				PortfolioValue: []float64{
					100000,
					167562,
					243689.2992,
					329252.13199872005,
					425209.14860979,
					532616.3981085448,
					652637.224156373,
					786553.1661306606,
					935775.9678095358,
					1.1018608061389846e+06,
					1.2865208640427056e+06,
				},
				DebtRecycled: []float64{
					105150,
					158076.24,
					211173.785984,
					264460.0426399744,
					317954.1829721958,
					371677.3279621709,
					425652.74448312743,
					479906.0633226132,
					534465.5193561907,
					589362.2161227796,
				},
				CumulativeDividends: []float64{
					2000,
					5351.24,
					10225.025984,
					16810.068623974403,
					25314.2515961702,
					35966.579558341095,
					49019.32404146856,
					64750.38736408177,
					83465.90672027248,
					105503.12284305217,
				},
				CumulativeTaxRefunds: []float64{
					3150,
					7875,
					14175,
					22050,
					31500,
					42525,
					55125,
					69300,
					85050,
					102375,
				},
				NetPosition: []float64{
					-500000,
					-432438,
					-356310.7008,
					-270747.86800127995,
					-174790.85139020998,
					-67383.60189145524,
					52637.22415637295,
					186553.16613066057,
					335775.9678095358,
					501860.8061389846,
				},
				TotalInvested: 600000,
				TotalValue:    1.494398986885758e+06,
			},
		},
		{
			params: Parameters{
				Salary:               150000,
				InitialInvestment:    100000,
				AnnualInvestment:     50000,
				MortgageSize:         600000,
				MortgageInterestRate: 0.05,
				DividendReturnRate:   0.02,
				CapitalGrowthRate:    0.08,
				NumYears:             10,
				Country:              "nz",
				ReinvestDividends:    false,
				ReinvestTaxRefunds:   false,
			},
			// HERE
			expected: &Data{
				PortfolioValue: []float64{
					100000,
					162000,
					228960.00000000003,
					301276.80000000005,
					379378.9440000001,
					463729.25952000014,
					554827.6002816001,
					653213.8083041282,
					759470.9129684585,
					874228.5860059352,
					998166.8728864101,
				},
				DebtRecycled: []float64{
					100000,
					150000,
					200000,
					250000,
					300000,
					350000,
					400000,
					450000,
					500000,
					550000,
				},
				CumulativeDividends: []float64{
					2000,
					5240,
					9819.2,
					15844.736,
					23432.31488,
					32706.900070400006,
					43803.45207603201,
					56867.72824211457,
					72057.14650148374,
					89541.71822160245,
				},
				CumulativeTaxRefunds: []float64{
					3349.9999999999995,
					8374.999999999998,
					15074.999999999996,
					23449.999999999996,
					33499.99999999999,
					45224.99999999999,
					58624.99999999999,
					73699.99999999999,
					90449.99999999999,
					108874.99999999999,
				},
				NetPosition: []float64{
					-500000,
					-438000,
					-371040,
					-298723.19999999995,
					-220621.05599999992,
					-136270.74047999986,
					-45172.39971839986,
					53213.80830412824,
					159470.9129684585,
					274228.5860059352,
				},
				TotalInvested: 600000,
				TotalValue:    1.1965835911080125e+06,
			},
		},
	}
	for i, c := range cases {
		dr, err := DebtRecycling(c.params)
		if err != nil {
			t.Error(err)
		}

		// Compare each float64 field
		compareAllFloat64Values(
			t,
			dr.PortfolioValue,
			c.expected.PortfolioValue,
			"PortfolioValue",
			i,
			c.params,
		)
		compareAllFloat64Values(
			t,
			dr.DebtRecycled,
			c.expected.DebtRecycled,
			"DebtRecycled",
			i,
			c.params,
		)
		compareAllFloat64Values(
			t,
			dr.CumulativeDividends,
			c.expected.CumulativeDividends,
			"CumulativeDividends",
			i,
			c.params,
		)
		compareAllFloat64Values(
			t,
			dr.CumulativeTaxRefunds,
			c.expected.CumulativeTaxRefunds,
			"CumulativeTaxRefunds",
			i,
			c.params,
		)
		compareAllFloat64Values(
			t,
			dr.NetPosition,
			c.expected.NetPosition,
			"NetPosition",
			i,
			c.params,
		)

		if dr.TotalInvested != c.expected.TotalInvested {
			t.Errorf(
				"Test %d: Parameters %v - TotalInvested is incorrect. Expected %v, got %v",
				i,
				c.params,
				c.expected.TotalInvested,
				dr.TotalInvested,
			)
		}

		if dr.TotalValue != c.expected.TotalValue {
			t.Errorf(
				"Test %d: Parameters %v - TotalValue is incorrect. Expected %v, got %v",
				i,
				c.params,
				c.expected.TotalValue,
				dr.TotalValue,
			)
		}
	}
}

// Helper function to compare all values in slices of float64
func compareAllFloat64Values(
	t *testing.T,
	got, want []float64,
	fieldName string,
	testIndex int,
	params Parameters,
) {
	if len(got) != len(want) {
		t.Errorf(
			"Test %d: Parameters %v - %s length is incorrect. Expected length %d, got length %d. Expected: %v, Got: %v",
			testIndex,
			params,
			fieldName,
			len(want),
			len(got),
			want,
			got,
		)
		return
	}

	for i := range got {
		if math.Abs(got[i]-want[i]) > 0.000001 {
			t.Errorf(
				"Test %d: Parameters %v - %s[%d] is incorrect. Expected %v, got %v. Full expected: %v, Full got: %v",
				testIndex,
				params,
				fieldName,
				i,
				want[i],
				got[i],
				want,
				got,
			)
		}
	}
}
